diff --git a/src/lib/dlt_user.c b/src/lib/dlt_user.c
index c6eaf0c..433125b 100644
--- a/src/lib/dlt_user.c
+++ b/src/lib/dlt_user.c
@@ -909,6 +909,7 @@ DltReturnValue dlt_init_common(void)
 
 void dlt_user_atexit_handler(void)
 {
+    printf("%s called\n", __FUNCTION__);
     /* parent will do clean-up */
     if (g_dlt_is_child)
         return;
@@ -937,7 +938,7 @@ void dlt_user_atexit_handler(void)
 
 int dlt_user_atexit_blow_out_user_buffer(void)
 {
-
+    printf("%s called\n", __FUNCTION__);
     int count, ret;
     struct timespec ts;
 
@@ -1000,6 +1001,7 @@ static void dlt_user_free_buffer(unsigned char **buffer)
 
 DltReturnValue dlt_free(void)
 {
+    printf("%s called\n", __FUNCTION__);
     uint32_t i;
     int ret = 0;
     int expected = 0;
@@ -1554,6 +1556,7 @@ DltReturnValue dlt_register_context_llccb(DltContext *handle,
  * still data in startup_buffer. atexit_handler will free the appIDs */
 DltReturnValue dlt_unregister_app_util(bool force_sending_messages)
 {
+    printf("%s called\n", __FUNCTION__);
     DltReturnValue ret = DLT_RETURN_OK;
 
     /* forbid dlt usage in child after fork */
@@ -1818,6 +1821,7 @@ DltReturnValue dlt_user_log_write_start_internal(DltContext *handle,
                                            uint32_t messageid,
                                            bool is_verbose)
 {
+    printf("%s called\n", __FUNCTION__);
     int ret = DLT_RETURN_TRUE;
 
     /* check nullpointer */
diff --git a/src/shared/dlt_common.c b/src/shared/dlt_common.c
index 4a049ef..6aefabb 100644
--- a/src/shared/dlt_common.c
+++ b/src/shared/dlt_common.c
@@ -2505,6 +2505,7 @@ DltReturnValue dlt_buffer_free_static(DltBuffer *buf)
 
 DltReturnValue dlt_buffer_free_dynamic(DltBuffer *buf)
 {
+    printf("%s called will sleep\n", __FUNCTION__);
     /* catch null pointer */
     if (buf == NULL)
         return DLT_RETURN_WRONG_PARAMETER;
@@ -2519,6 +2520,9 @@ DltReturnValue dlt_buffer_free_dynamic(DltBuffer *buf)
     buf->shm = NULL;
     buf->mem = NULL;
 
+    sleep(3);
+    printf("%s called done sleep\n", __FUNCTION__);
+
     return DLT_RETURN_OK;
 }
 
@@ -2739,6 +2743,7 @@ int dlt_buffer_push3(DltBuffer *buf,
                      const unsigned char *data3,
                      unsigned int size3)
 {
+    printf("%s called\n", __FUNCTION__);
     int free_size;
     int write, read, count;
     DltBufferBlockHead head;
@@ -2753,6 +2758,9 @@ int dlt_buffer_push3(DltBuffer *buf,
         return DLT_RETURN_ERROR; /* ERROR */
     }
 
+    sleep(1);
+    printf("Wake up to log\n");
+
     /* get current write pointer */
     write = ((int *)(buf->shm))[0];
     read = ((int *)(buf->shm))[1];
